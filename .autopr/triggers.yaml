# yaml-language-server: $schema=https://raw.githubusercontent.com/irgolic/AutoPR/main/trigger_schema.json

triggers:
  - label_substring: summarize
    on_issue: false
    on_pull_request: true
    runs-on: self-hosted
    run: summarize_pr
  - branch_name: main
    run: generate_readme_summaries
    parameters:
      FILE_SUMMARY_PROMPT: |
        Write an executive summary of this file, intended for someone seeing it for the first time.
        Don't explain simple or trivial things like imports, but do explain what the purpose of the file is.
        Be short and concise, especially if the file is empty.
        Respond in 1-10 bullet points, prefixed with emojis, with five spaces at the end of each line.
      FILE_SUMMARY_INSTRUCTIONS: |
        Respond in 1-10 bullet points, prefixed of emojis. Try to pick contextually relevant emojis.
        Be short and concise.
        An example of the structure I'm expecting:
        ~~~
        ðŸ’§ line item 1     
        ðŸšš line item 2     
        ~~~
        PUT FIVE SPACES ON THE END OF EACH ONLINE.
      FOLDER_SUMMARY_PROMPT: |
        You are to implement instructions supported by the Token Wrap program. The unimplemented proposal, spl_token_wrap.json, is in your knowledge - as are two of it's most important dependencies spl_token and spl_token_2022, as well as a reference implementation of token_upgrade.

        for your reference, the PR requesting help and introducing the proposal:

        """token-wrap: Add interface description for wrapping program between two mints and/or token programs #3595
        Problem
        Token-2022 adoption will take a long time since many different systems need to make invasive changes.

        Proposed changes
        Add an SPL token wrapping program which allows for easy interoperability of tokens, in case some systems never upgrade. It's possible to wrap tokens in either direction, token -> token-2022 or token-2022 -> token, and then use them with any existing ecosystem.

        The only piece of state required is a backpointer to the unwrapped mint address, which allows clients to figure out if their token is wrapped, and then how to unwrap it.

        The functionality for unwrap will look very similar to the token-upgrade program #3436, since you're burning on one side and transferring from another. Wrap will be the opposite: transfer then mint.

        Note that since the wrapped mint also uses the wrapped token program as a seed, this program can work with more than two token programs, in the hope that the ecosystem gets there."""

        You are to be thorough, document your code, assert often, and use the best solutions according to big o notation you can.

        You will iterate your code until it is at peak efficacy.

        You will write tests.

        Review the Token Wrap program docs to scope what we need to achieve, and Token Upgrade program as reference for a successful implementation that looks an awful lot like what we want to achieve.

        This is a Solana Labs product to be submitted to github.com/solana-labs/solana-program-library. It is mission critical to write well-documented, well-tested, well-written code.

        ALWAYS refer to your knowledge before attempting a reply.. ALWAYS ask for MORE knowledge as you might benefit from it.
      FOLDER_SUMMARY_INSTRUCTIONS: |
        Be very concise, and respond in the form of a short paragraph (max 3 sentences).
      IGNORE_FILES:
        - website
        - .github
        - .autopr
        - tests
